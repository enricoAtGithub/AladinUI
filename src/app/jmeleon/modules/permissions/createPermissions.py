import yaml, operator


all_nodes = {}
class Node:
    def __init__(self, name):
        self.name = name
        self.nodes = []
        self.leafes = []

    def getLeafs(self):
        result = [self.name + '.' + l for l in self.leafes]
        for node in self.nodes: result += node.getLeafs()
        return result
    
    def ts(self, intendation):
        result = ""
        parts = self.name.split('.')
        result += (intendation + parts[-1] + ': {\n')
        # leaves
        result += (',\n'.join([intendation + '\t' + l + ': "'+ self.name + '.' + l + '"' for l in self.leafes]))
        # comma between leafs and nodes
        if len(self.leafes) and len(self.nodes):
            result += ",\n"
        # nodes
        result += ',\n'.join([node.ts(intendation + '\t') for node in self.nodes])
        result += '\n' + intendation + '}'
        return result


def node_exists(node_path):
    return all_nodes.has_key(node_path)

def getNode(node_path):
    if not node_exists(node_path):
        all_nodes[node_path] = Node(node_path)
    return all_nodes[node_path]

def expand(node_path, child_list):
    for l in child_list:
        if isinstance(l, str):
            getNode(node_path).leafes.append(l)
        else:
            for (k,v) in l.items():
                child_node = getNode(node_path + '.' + k)
                getNode(node_path).nodes.append(child_node)
                expand(child_node.name, v)


# Einlesen der Struktur
nodes = []
with open('permissions.yml') as file:
    rootList = yaml.load(file, Loader=yaml.FullLoader)
    #print rootList
    for d in rootList:
        for (k,v) in d.items():
            ne = node_exists(k)
            expand(k, v)
            if not ne:
                nodes.append(getNode(k))


# Schreiben in ts
output = open("permissions.ts","wb")
output.write("""// Do not modify this file, it will be autogenerated\n\n
const root = {
""")

output.write(',\n'.join([node.ts('\t') for node in nodes]))

output.write("\n}\n")

output.close()